package com.toyota.prius.puzzle{		import flash.events.Event;	import flash.display.MovieClip;	import flash.events.MouseEvent;	import flash.events.KeyboardEvent;		import flash.display.StageAlign;	import flash.display.StageScaleMode;		import com.socialvibe.engagement.api.*;		import org.osflash.signals.Signal;	import com.greensock.TweenLite;	import com.greensock.easing.Back;	import com.greensock.easing.Sine;		import com.toyota.prius.puzzle.elements.Button;	import com.toyota.prius.puzzle.views.Away3DView;	import com.toyota.prius.puzzle.proxies.AssetProxy;		import com.toyota.prius.puzzle.commands.ShuffleCommand;	import com.toyota.prius.puzzle.commands.SolveCommand;	import com.toyota.prius.puzzle.views.EndCopyView;	//import com.toyota.prius.puzzle.views.HowToPlay;	import com.toyota.prius.puzzle.views.PuzzleState;		/**	 * ...	 * @author jin	 */		[SWF(width = '750', height = '500', backgroundColor = '#FFFFFF', frameRate = '24')]		public class PuzzleMain extends MovieClip 	{			private const SOLVE_CLICK_NUM	:uint	= 2;				private var _state				:String;		private var _isReplay			:Boolean;				private var _awayView			:Away3DView;		private var _shuffleCommand		:ShuffleCommand;		private var _solveCommand		:SolveCommand;				private var _replay				:Signal;				//private var _howToPlay		:HowToPlay;		private var _hintBtn		:MovieClip;		private var _replayBtn		:MovieClip;		private var _nextBtn		:MovieClip;		private var _solveClicked	:uint;				private var _isDebug		:Boolean;				public var _api:SocialVibeProxy = new SocialVibeProxy();						public function PuzzleMain():void 		{			_replay = new Signal();						if (stage) init();			else this.addEventListener(Event.ADDED_TO_STAGE, init);			//trace('init!')			//addEventListener(Event.ACTIVATE, init);					}				private function init(e:Event = null):void 		{			removeEventListener(Event.ADDED_TO_STAGE, init);						stage.scaleMode = StageScaleMode.NO_SCALE;			_isDebug 	= ( parent == stage );			_isReplay 	= false;						addAssets();			addCommands();			reset();			onHideBtnDone();		}				private function addAssets():void		{			_awayView = new Away3DView( this );			_awayView.ready.add( onAwayViewReady );			_awayView.solved.add( onPuzzleSolved );						addChild( _awayView );			_awayView.x = 90			_awayView.y = 50						if ( !_isDebug )			{				_hintBtn 	= this.getChildByName( "_btnHint" ) as MovieClip;				_replayBtn 	= this.getChildByName( "_btnReplay" ) as MovieClip;				_nextBtn 	= this.getChildByName( "_btnNext" ) as MovieClip;				//trace('!_isDebug')			}			else			{				_hintBtn	= new Button('hint');				_hintBtn.x = 450;				_hintBtn.y = 370;								_replayBtn	= new Button('replay');				_replayBtn.x = 800;				_replayBtn.y = 50;								_nextBtn	= new Button('next');				_nextBtn.x = 900;				_nextBtn.y = 50;			}						setButton( _replayBtn, 	onReplayClick );			setButton( _hintBtn, 	onHintClick );			setButton( _nextBtn, 	onNextClick );			/*_howToPlay = new HowToPlay( _isDebug );			_howToPlay.x = 36;			_howToPlay.y = 90;*/						//addChild(_howToPlay);			addChild(_replayBtn);			addChild(_hintBtn);			addChild(_nextBtn);						stage.addEventListener(KeyboardEvent.KEY_DOWN, onKey);		}				private function addCommands():void		{			_shuffleCommand = new ShuffleCommand();			_solveCommand 	= new SolveCommand();						_solveCommand.hintDone.add( onHintDone );		}				private function reset():void		{			_solveClicked 	= 0;			_isReplay 		= false;			showBtns( false );						//_howToPlay.onShow();						if ( _isDebug ) _hintBtn.setLabel( "hint" );			else			{				_hintBtn.mc.gotoAndStop( 1 );				_hintBtn.box.gotoAndStop( 1 );			}		}				// *************************************************		// onAwayViewReady		// *************************************************				private function onAwayViewReady():void		{			trace(this, "onAwayViewReady");			onShuffle();		}				// *************************************************		// BUTTONS		// *************************************************		private function showBtns( bol:Boolean ):void		{			_hintBtn.mouseEnabled = _replayBtn.mouseEnabled = _nextBtn.mouseEnabled = bol;						TweenLite.killTweensOf( _hintBtn );			TweenLite.killTweensOf( _replayBtn );			TweenLite.killTweensOf( _nextBtn );							if ( bol )			{				_replayBtn.visible = false;				_nextBtn.visible = false;				_hintBtn.visible = true;				_replayBtn.alpha 	= _hintBtn.alpha  = _nextBtn.alpha = 0;					_hintBtn.x = 515;				_hintBtn.y = 435;								TweenLite.to( _hintBtn, 	.5, { y:435, 	alpha:1, 	ease:Back.easeOut, easeParams:[.75] } );				//TweenLite.to( _replayBtn, 	.5, { alpha:1, 	ease:Sine.easeOut, delay:.2 } );			}			else			{				TweenLite.to( _hintBtn, 	.4, { y:435, 	alpha:0,	ease:Back.easeIn, easeParams:[.75], onComplete:onHideBtnDone } );				TweenLite.to( _replayBtn, 	.4, { alpha:0,				ease:Sine.easeOut } );				TweenLite.to( _nextBtn, 	.4, { alpha:0,				ease:Sine.easeOut } );			}					}				private function onHideBtnDone():void		{			_replayBtn.visible = _hintBtn.visible = _nextBtn.visible = false;		}				// *************************************************		// REPLAY		// *************************************************		private function onReplayClick( e:MouseEvent=null ):void		{			trace( this, "REPLAY " + _awayView.state );			_isReplay		= true;						_replay.dispatch();						TweenLite.killDelayedCallsTo( onCubePlayOutro );						removeLoader();			if ( this.getChildByName( "endCopyView" ) ) this.removeChild( this.getChildByName( "endCopyView") );						_solveClicked 	= SOLVE_CLICK_NUM;			onHintClick();						reset();						//EWBase.trackInteraction("Replay");			_api.trackOtherInteraction('replay');		}				// *************************************************		// SHUFFLE		// *************************************************				private function onShuffle():void		{			//run('shuffle',{strength:7});			_shuffleCommand.execute( _awayView.asset );			_shuffleCommand.complete.addOnce( onShuffleComplete );		}				private function onShuffleComplete():void		{			trace(this, "onShuffleComplete : " );			_awayView.startGame();			showBtns( true );		}				// *************************************************		// HINT		// *************************************************				private function onHintClick(e:MouseEvent=null):void		{			//TODO			//run('solve',{});			var solve:Boolean 		= _solveClicked >= SOLVE_CLICK_NUM;			var firstHint:Boolean 	= _solveClicked == 0;			var speed:Number 		= _isReplay ? 0 : .4;			_solveCommand.execute( _awayView.asset, solve, firstHint, speed );						// make cube not clickable			//if ( solve ) _awayView.removeListeners();			_awayView.onHintStart( solve );						_solveClicked ++;						_hintBtn.mouseEnabled = false;						TweenLite.killTweensOf( _hintBtn );			TweenLite.to( _hintBtn, 	.3, { y:435, 	alpha:0,	ease:Sine.easeOut, onComplete:null } );						if ( e != null )			{				var trackStr:String = solve ? "Solve" : firstHint ? "Hint" : "AnotherHint";				//EWBase.trackInteraction(trackStr);				_api.trackOtherInteraction('hint');			}					}				private function setNextHintLabel():void		{			if ( _solveClicked > SOLVE_CLICK_NUM ) return;						if ( _solveClicked < SOLVE_CLICK_NUM )			{				if ( _isDebug ) ( _hintBtn as Button ).setLabel( "another hint" );				else {					_hintBtn.mc.gotoAndStop( 2 );					_hintBtn.box.gotoAndStop( 2 );				}			}			else if ( _solveClicked == SOLVE_CLICK_NUM )			{				if ( _isDebug ) ( _hintBtn as Button ).setLabel( "solve" );				else {					_hintBtn.mc.gotoAndStop( 3 );					_hintBtn.box.gotoAndStop( 3 );				}			}						TweenLite.killTweensOf( _hintBtn ); 			TweenLite.to( _hintBtn, 	.5, { y:435, 	alpha:1, 	ease:Back.easeOut, easeParams:[.75], onComplete:onHintShown } );					}				private function onHintShown():void		{			_hintBtn.mouseEnabled = true;		}				private function onHintDone():void		{			if ( !_awayView.asset.solved )			{				_awayView.onHintDone();				setNextHintLabel();			}		}				// *************************************************		// PUZZLE SOLVED		// *************************************************		private function onPuzzleSolved():void		{			_hintBtn.visible = false;						//addLoader();						//_howToPlay.onHide();						if ( this.parent == stage ) {				trace( "DEBUG PLAY OUTRO" );				//TweenLite.delayedCall( 5, cubePlayOutro );			}else {				trace( "Wait to load Vid!" );				//gotoAndPlay(2);				//addChild(_replayBtn);				_replayBtn.visible = true;				_nextBtn.visible = true;				//_nextBtn.alpha = 1;				//_replayBtn.alpha = 0;				TweenLite.to( _nextBtn, 	.5, {alpha:1, 	ease:Back.easeOut, easeParams:[.75]} );				TweenLite.to( _replayBtn, 	.5, {alpha:1, 	ease:Back.easeOut, easeParams:[.75]} );								_replayBtn.x = 435				_replayBtn.y = 435								_nextBtn.x = 585				_nextBtn.y = 435							}						//if ( _solveClicked <= SOLVE_CLICK_NUM ) EW.trackEvent ("SOLVED");		}				private function onNextClick(e:MouseEvent=null):void		{			//trace('goto next frame!')			_api.engage();			_api.trackNavigationNext('step 2');			dispatchEvent(new Event( 'engagementNextStep', true, true ));		}						// *************************************************		// PLAY OUTRO		// *************************************************				public function cubePlayOutro():void		{			trace("delayed call to onCubePlayOutro : " + _awayView.state );			if ( _awayView.state != PuzzleState.SOLVED ) return;						//TweenLite.delayedCall( .1, onCubePlayOutro );			onCubePlayOutro();		}				private function onCubePlayOutro():void		{			trace("onCubePlayOutro!!" );			TweenLite.killDelayedCallsTo( onCubePlayOutro );			removeLoader();						if ( _awayView.state != PuzzleState.SOLVED ) return;						_awayView.onAddOutroCube();						if ( _isDebug ) return;						var endCopyView:EndCopyView = new EndCopyView( _isDebug );			endCopyView.name = "endCopyView";			this.addChild( endCopyView );		}				// *************************************************		// LOADER		// *************************************************				private function addLoader():void		{			if ( !this.getChildByName( "loaderCircle" ) )			{				var loader:MovieClip =  new loaderCircle2() as MovieClip;				this.addChild( loader );				loader.name = "loaderCircle";				loader.x = 485;				loader.y = 208;				loader.alpha = .5;			}		}				private function removeLoader():void		{			if ( this.getChildByName( "loaderCircle" ) )			{				var loader:MovieClip =  this.getChildByName( "loaderCircle" ) as MovieClip;				loader.stop();				this.removeChild( loader );			}		}				// *************************************************		// BUTTONS		// *************************************************		private function setButton( btn:MovieClip, clickFunc:Function=null ):void		{			btn.addEventListener( MouseEvent.CLICK, 		clickFunc!=null ? clickFunc : onBtnClick );			btn.addEventListener( MouseEvent.MOUSE_OVER, 	onBtnOver );			btn.addEventListener( MouseEvent.MOUSE_OUT, 	onBtnOut );						btn.mouseChildren = false;			btn.mouseEnabled = btn.buttonMode = true;			btn.gotoAndStop( "up" );		}				private function onBtnClick( e:MouseEvent ):void		{					}				private function onBtnOver( e:MouseEvent ):void		{			var btn:MovieClip = e.currentTarget as MovieClip;			btn.gotoAndStop( "over" );		}				private function onBtnOut( e:MouseEvent ):void		{			var btn:MovieClip = e.currentTarget as MovieClip;			btn.gotoAndStop( "up" );		}				// *************************************************				public function get replay():Signal { return _replay; };		public function get solved():Signal { return _awayView.solved; }		public function get clickthru():Signal { return _awayView.clickthru; }		public function get puzzleState():String { return _awayView.state; }				// *************************************************				private function clear():void		{			TweenLite.killDelayedCallsTo( onCubePlayOutro );		}				// *************************************************				public function cubeStop():void		{			_awayView.stopCube();					}		// *************************************************				private function onKey(e:KeyboardEvent):void		{			//TODO			/*			if(e.keyCode == Keyboard.SPACE)			if(e.shiftKey)	run('solve',{});			else 			run('shuffle',{strength:7});*/		}	}}