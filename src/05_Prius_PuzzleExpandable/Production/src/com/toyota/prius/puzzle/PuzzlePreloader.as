package com.toyota.prius.puzzle{	import flash.display.DisplayObject;	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.display.StageScaleMode;	import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.events.ProgressEvent;		import org.osflash.signals.Signal;	import com.toyota.prius.interfaces.IPriusExpandable;		/**	 * ...	 * @author jin	 */		public class PuzzlePreloader extends MovieClip implements IPriusExpandable	{		static public var isDebug:Boolean;				private var mainClass:PuzzleMain;				public function PuzzlePreloader() 		{			trace(this, "PuzzlePreloader : ");			addEventListener(Event.ADDED_TO_STAGE, initListener);		}						private function initListener(e:Event):void		{			removeEventListener(Event.ADDED_TO_STAGE, initListener);						var url:String = loaderInfo.url;			isDebug = url.indexOf( "file" ) > -1 && url.indexOf( "EyeWonder" ) < 0 ;						if (stage) stage.scaleMode = StageScaleMode.NO_SCALE;									addLoader();			loaderInfo.addEventListener(ProgressEvent.PROGRESS, progress);			loaderInfo.addEventListener(Event.COMPLETE, 		complete);			loaderInfo.addEventListener(IOErrorEvent.IO_ERROR, 	ioError);		}				private function ioError(e:IOErrorEvent):void 		{			trace(e.text);		}				private function progress(e:ProgressEvent):void 		{			trace('processing...'+e.bytesLoaded/e.bytesTotal);		}				private function complete(e:Event):void 		{			trace( this, "complete" );						loaderInfo.removeEventListener(ProgressEvent.PROGRESS, progress);			loaderInfo.removeEventListener(Event.COMPLETE, complete);			loaderInfo.removeEventListener(IOErrorEvent.IO_ERROR, ioError);						removeLoader();						startup();		}				private function startup():void 		{			trace(this, "startup ");						mainClass = new PuzzleMain();			this.addChild( mainClass );					}				public function addLoader():void		{			/*			loader = new loaderCircle();			loader.x = 150;			loader.y = 125;			this.addChild( loader );			*/		}				public function removeLoader():void		{			//if( loader.parent ) this.removeChild( loader );		}				public function removePlaceHolder():void		{					}				public function cubeStop():void		{			if( mainClass ) mainClass.cubeStop();		}		public function cubePlayOutro():void		{			if( mainClass ) mainClass.cubePlayOutro();		}				public function get solved():Signal		{			return mainClass.solved;		}				public function get replay():Signal		{			return mainClass.replay;		}				public function get clickthru():Signal		{			return mainClass.clickthru;		}				public function get puzzleState():String		{			return mainClass.puzzleState;		}			}}