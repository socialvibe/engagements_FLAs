package com.toyota.prius.puzzle.proxies {	import away3d.containers.ObjectContainer3D;	import away3d.primitives.Plane;	import away3d.materials.BitmapMaterial;	import away3d.core.utils.Cast;	import away3d.core.base.Object3D;		import org.osflash.signals.Signal;	import com.toyota.prius.puzzle.utils.Vector3D;	import com.greensock.TweenLite;	import com.greensock.easing.Sine;	import com.greensock.easing.Quad;		/**	 * ...	 * @author jin	 */		public class OutroCubeProxy extends ObjectContainer3D	{		//[Embed(source = '/CubeTex_side_01.jpg', mimeType = "image/jpeg")]		[Embed(source="../../../../../../deploy/data/away3d/CubeTex_side_01.jpg",mimeType="application/octet-stream")]		private static const asset_texture_01:Class;		//[Embed(source = '/CubeTex_side_02.jpg', mimeType = "image/jpeg")]		[Embed(source="../../../../../../deploy/data/away3d/CubeTex_side_02.jpg",mimeType="application/octet-stream")]		private static const asset_texture_02:Class;		//[Embed(source = '/CubeTex_side_03.jpg', mimeType = "image/jpeg")]		[Embed(source="../../../../../../deploy/data/away3d/CubeTex_side_03.jpg",mimeType="application/octet-stream")]		private static const asset_texture_03:Class;		//[Embed(source = '/CubeTex_side_04.jpg', mimeType = "image/jpeg")]		[Embed(source="../../../../../../deploy/data/away3d/CubeTex_side_04.jpg",mimeType="application/octet-stream")]		private static const asset_texture_04:Class;		//[Embed(source = '/CubeTex_side_05.jpg', mimeType = "image/jpeg")]		[Embed(source="../../../../../../deploy/data/away3d/CubeTex_side_05.jpg",mimeType="application/octet-stream")]		private static const asset_texture_05:Class;		//[Embed(source = '/CubeTex_side_06.jpg', mimeType = "image/jpeg")]		[Embed(source="../../../../../../deploy/data/away3d/CubeTex_side_06.jpg",mimeType="application/octet-stream")]		private static const asset_texture_06:Class;				private var _done:Signal;				public function OutroCubeProxy( delay:Number=0 ) 		{			_done = new Signal();			initObjects( delay );		}				private function initObjects( delay:Number ):void 		{			var mArr:Array = [ asset_texture_01, asset_texture_02, asset_texture_03, asset_texture_04, asset_texture_05, asset_texture_06 ];						var off:uint = 4;			var time:Number = 1.25;			var outDis:uint = 200;						var posArr:Array = [ 	new Vector3D(  off, 	0, 		  0, 		  0,  -90, 	-90 ),									new Vector3D(    0, 	0, 		off, 		-90, 	0, 	180 ),									new Vector3D( -off, 	0, 		  0, 		  0,   90, 	 90 ),									new Vector3D(    0, 	0, 	   -off, 	 	 90, 	0, 	  0 ),									// bottom									new Vector3D(    0,  -off, 	  	  0, 		180, 	0,	  0 ),									//top									new Vector3D(    0,   off, 	  	  0, 	   	  0, 	180,  0 ) ]							for ( var i:uint = 0; i < 6; ++i )			{				var side:Plane = addSide( mArr[i], posArr[i] );				this.addChild( side );								if ( i == 0 ) 		TweenLite.to( side, time, { x:outDis, 	rotationX:180,	ease:Quad.easeIn, delay:delay } );				else if ( i == 1 ) 	TweenLite.to( side, time, { z:outDis, 	rotationX:90,	ease:Quad.easeIn, delay:delay } );				else if ( i == 2 ) 	TweenLite.to( side, time, { x:-outDis, 	rotationX:180,	ease:Quad.easeIn, delay:delay } );				else if ( i == 3 ) 	TweenLite.to( side, time, { z:-outDis, 	rotationX:270,	ease:Quad.easeIn, delay:delay } );				else if ( i == 4 ) 	TweenLite.to( side, time, { y:-outDis, 	rotationY:180,	ease:Quad.easeIn, delay:delay } );				else if ( i == 5 ) 	TweenLite.to( side, time, { y:outDis, 	rotationX:180,	ease:Quad.easeIn, delay:delay, onComplete:onComplete } );			}		}				private function addSide( m:Class, pos:Vector3D ):Plane		{			var plane:Plane = new Plane();			plane.material = new BitmapMaterial(Cast.bitmap(m) );			plane.bothsides = true;			plane.width = 8;			plane.height = 8;			plane.segmentsW = 2;			plane.segmentsH = 2;			plane.x = pos.x;			plane.y = pos.y;			plane.z = pos.z;			plane.rotationX = pos.rotationX;			plane.rotationY = pos.rotationY;			plane.rotationZ = pos.rotationZ;			plane.yUp = true;						return plane;		}						private function onComplete():void		{			_done.dispatch();		}				public function clear():void		{	            while ( this.children.length > 0 )			{				TweenLite.killTweensOf( this.children[0] );				this.removeChild( this.children[0] );			}		}				public function get done():Signal { return _done; };	}	}