package { 		import flash.display.MovieClip;	import flash.events.Event;	import flash.text.TextField;	import com.greensock.*; 	import com.greensock.easing.*;	import org.casalib.time.Interval;	import com.greensock.loading.LoaderMax;	import org.casalib.util.ArrayUtil;		import com.google.analytics.AnalyticsTracker; 	import com.google.analytics.GATracker; 	import com.socialvibe.engagement.api.*;	public class MainApp extends MovieClip {				private var _api:SocialVibeProxy = new SocialVibeProxy();		public static var instance:MovieClip;				public static var tw1:TweenMax;				public var siid:Interval;		public var counter:Number = 0;				public var currTimeStamp:Number;				public static var tw2:TweenMax;				public var _xml;				public var open_times:Array = [];		public var close_times:Array = [];				public var stamps_open:Array = [];		public var stamps_close:Array = [];				public static var tracker:AnalyticsTracker;				public function MainApp() {						tracker = new GATracker( this, Config.GA_UID, "AS3", false);// true );											instance = this;									if (Config.xmlLoaded)			checkXML();						if (FlashVars.getFV("skipIntro") == "true") {								gotoAndPlay("skip");							}									track("BankJob", "application run");					}				public static function track(cat:String,action:String,label:String = null, value:Number = 0) {						// Google Analytics Event Tracking Example			// trackEvent(category:String, action:String, label:String = null, value:Number);						tracker.trackEvent(cat, action, null, null);							// Google Analytics Event Tracking Example// trackEvent(category:String, action:String, label:String = null, value:Number);// tracker.trackEvent("MyProject", "ButtonClicked", "HomeButton");								}				public function pauseWrong() {						this.stop();						if (tw2) tw2.kill();						tw2 = TweenMax.delayedCall(2, play);								}				public function checkXML() {						currTimeStamp = new Date().getTime();						_xml = LoaderMax.getContent(Config.XML_FILE).tournaments;						Config.isTournament = false;						for (var i = 0; i < _xml.tournament.length(); i++) {								var day:String = String(_xml.tournament[i].data.text());				var h_open = _xml.tournament[i].open.text();				var h_close = _xml.tournament[i].close.text();								var open = h_open.split(":");				var close = h_close.split(":");												var oo = day.split("-");								var d_year = oo[0];				var d_mm = oo[1];				var d_dd = oo[2];											var target_open:Date = new Date(Number(d_year), Number(d_mm-1), Number(d_dd), Number(open[0]), Number(open[1]));				var target_close:Date = new Date(Number(d_year), Number(d_mm-1), Number(d_dd), Number(close[0]), Number(close[1]));								stamps_open.push(target_open.getTime());				stamps_close.push(target_open.getTime());								if (currTimeStamp >= target_open.getTime() && currTimeStamp <= target_close.getTime()) {										Config.isTournament = true;									} else {																			}								/*				 				Trace.add(target_open.getTime());				Trace.add(target_close);								*/				//Trace.add("rok: " + d_year + " : mm " + d_mm + " : dd : " + d_dd);											}												//Trace.add(Config.isTournament);						}										public function endOfTime() {						gotoAndPlay("finish");			_api.trackGameEnd();			_api.engage();					}								public function killTimer() {						if (tw2) tw2.kill();						if (tw1) tw1.kill();						if (siid) {			siid.stop();			siid.destroy();			}		}				public function runTimer() {						tw1 = TweenMax.delayedCall(30, endOfTime);						counter = 30;						siid = Interval.setInterval(function(p1) { 								counter--;				upd();												} , 1000, "PARAM");			siid.repeatCount = 30;			siid.start();					}				public function upd() {						mcTimer.mytf1.text = counter;			mcTimer.mytf2.text = counter;					}			}		}